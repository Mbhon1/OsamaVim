-- auto install packer if not installed
local ensure_packer = function()
	local fn = vim.fn
	local install_path = fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"
	if fn.empty(fn.glob(install_path)) > 0 then
		fn.system({ "git", "clone", "--depth", "1", "https://github.com/wbthomason/packer.nvim", install_path })
		vim.cmd([[packadd packer.nvim]])
		return true
	end
	return false
end
local packer_bootstrap = ensure_packer() -- true if packer was just installed

-- autocommand that reloads neovim and installs/updates/removes plugins
-- when file is saved
vim.cmd([[ 
  augroup packer_user_config
    autocmd!
    autocmd BufWritePost plugins-setup.lua source <afile> | PackerSync
  augroup end
]])

-- import packer safely
local status, packer = pcall(require, "packer")
if not status then
	return
end

-- add list of plugins to install
return packer.startup(function(use)
	-- packer can manage itself
	use("wbthomason/packer.nvim")

	use("nvim-lua/plenary.nvim") -- lua functions that many plugins use

	-- colorschemes
	use("bluz71/vim-nightfly-guicolors")
	use("lunarvim/onedarker.nvim")
	use("lunarvim/darkplus.nvim")
	use("folke/tokyonight.nvim")
	use("catppuccin/nvim")
	use("rebelot/kanagawa.nvim")

	use("christoomey/vim-tmux-navigator") -- tmux & split window navigation

	use("szw/vim-maximizer") -- maximizes and restores current window

	-- essential plugins
	use("tpope/vim-surround") -- add, delete, change surroundings (it's awesome)
	use("inkarkat/vim-ReplaceWithRegister") -- replace with register contents using motion (gr + motion)

	-- commenting with gc
	use("numToStr/Comment.nvim")

	-- file explorer
	use("nvim-tree/nvim-tree.lua")

	-- vs-code like icons
	use("nvim-tree/nvim-web-devicons")

	-- statusline
	use("nvim-lualine/lualine.nvim")

	-- fuzzy finding w/ telescope
	use({ "nvim-telescope/telescope-fzf-native.nvim", run = "make" }) -- dependency for better sorting performance
	use({ "nvim-telescope/telescope.nvim", branch = "0.1.x" }) -- fuzzy finder

	-- autocompletion
	use("hrsh7th/nvim-cmp") -- completion plugin
	use("hrsh7th/cmp-buffer") -- source for text in buffer
	use("hrsh7th/cmp-path") -- source for file system paths
	use({ "tzachar/cmp-tabnine", run = "./install.sh", requires = "hrsh7th/nvim-cmp" }) -- tabnine auto-predection

	-- snippets
	use("L3MON4D3/LuaSnip") -- snippet engine
	use("saadparwaiz1/cmp_luasnip") -- for autocompletion
	use("rafamadriz/friendly-snippets") -- useful snippets

	-- managing & installing lsp servers, linters & formatters
	use("williamboman/mason.nvim") -- in charge of managing lsp servers, linters & formatters
	use("williamboman/mason-lspconfig.nvim") -- bridges gap b/w mason & lspconfig

	-- configuring lsp servers
	use("neovim/nvim-lspconfig") -- easily configure language servers
	use("hrsh7th/cmp-nvim-lsp") -- for autocompletion
	use({
		"glepnir/lspsaga.nvim",
		branch = "main",
		requires = {
			{ "nvim-tree/nvim-web-devicons" },
			{ "nvim-treesitter/nvim-treesitter" },
		},
	}) -- enhanced lsp uis
	use("jose-elias-alvarez/typescript.nvim") -- additional functionality for typescript server (e.g. rename file & update imports)
	use("onsails/lspkind.nvim") -- vs-code like icons for autocompletion

	-- formatting & linting
	use("jose-elias-alvarez/null-ls.nvim") -- configure formatters & linters
	use("jayp0521/mason-null-ls.nvim") -- bridges gap b/w mason & null-ls

	-- treesitter configuration
	use({
		"nvim-treesitter/nvim-treesitter",
		run = function()
			local ts_update = require("nvim-treesitter.install").update({ with_sync = true })
			ts_update()
		end,
	})

	-- auto closing
	use("windwp/nvim-autopairs") -- autoclose parens, brackets, quotes, etc...
	use({ "windwp/nvim-ts-autotag", after = "nvim-treesitter" }) -- autoclose tags

	-- git integration
	use("lewis6991/gitsigns.nvim") -- show line modifications on left hand side
	use("f-person/git-blame.nvim")
	-- colorizer
	use("norcalli/nvim-colorizer.lua") -- color text according to formats

	-- indentation style
	use("lukas-reineke/indent-blankline.nvim")

	-- syntax highlighting part of treesitter
	use("p00f/nvim-ts-rainbow")

	-- lsp better error lines
	use({
		"https://git.sr.ht/~whynothugo/lsp_lines.nvim",
		config = function()
			require("lsp_lines").setup()
		end,
	})

	-- bufferline
	use({ "akinsho/bufferline.nvim", tag = "v3.*", requires = "nvim-tree/nvim-web-devicons" })

	-- transparent background
	-- use("xiyaowong/transparent.nvim")
	-- use("tribela/vim-transparent")

	-- dashboard
	use({ "glepnir/dashboard-nvim", requires = { "nvim-tree/nvim-web-devicons" } })
	-- use({
	-- 	"glepnir/dashboard-nvim",
	-- 	event = "VimEnter",
	-- 	-- config = function()
	-- 	-- 	require("dashboard").setup({
	-- 	-- 		-- config here
	-- 	-- 	})
	-- 	-- end,
	-- 	requires = { "nvim-tree/nvim-web-devicons" },
	-- })

	-- Spectre search
	use("windwp/nvim-spectre")

	-- which-key
	use("folke/which-key.nvim")

	-- vim illuminate
	use({ "RRethy/vim-illuminate", requires = "nvim-lua/plenary.nvim" })

	-- todo comments
	use("folke/todo-comments.nvim")

	-- mini animate
	--[[ 	use("echasnovski/mini.nvim") ]]

	-- session saver
	use({
		"glepnir/dbsession.nvim",
		cmd = { "SessionSave", "SessionDelete", "SessionLoad" },
	})

	-- notify
	use("rcarriga/nvim-notify")

	-- nui
	use("MunifTanjim/nui.nvim")

	-- noice
	use({
		"folke/noice.nvim",
		requires = {
			"MunifTanjim/nui.nvim",
			-- OPTIONAL:
			--   `nvim-notify` is only needed, if you want to use the notification view.
			--   If not available, we use `mini` as the fallback
			"rcarriga/nvim-notify",
		},
	})

	-- dressing
	use("stevearc/dressing.nvim")

	-- indent scope
	use("echasnovski/mini.nvim")

	-- alpha
	-- use({
	-- 	"goolord/alpha-nvim",
	-- 	requires = { "nvim-tree/nvim-web-devicons" },
	-- 	config = function()
	-- 		require("alpha").setup(require("alpha.themes.dashboard").config)
	-- 	end,
	-- })

	-- persistents
	use({
		"folke/persistence.nvim",
		event = "BufReadPre", -- this will only start session saving when an actual file was opened
		module = "persistence",
		config = function()
			require("persistence").setup({
				dir = vim.fn.expand(vim.fn.stdpath("state") .. "/sessions/"), -- directory where session files are saved
				options = { "buffers", "curdir", "tabpages", "winsize" }, -- sessionoptions used for saving
				pre_save = nil, -- a function to call before saving the session
			})
		end,
	})

	-- vista
	--[[ 	use("liuchengxu/vista.vim") ]]

	-- startify
	use("mhinz/vim-startify")

	-- testing multi curors
	use({ "mg979/vim-visual-multi", branch = "master" })

	if packer_bootstrap then
		require("packer").sync()
	end
end)
